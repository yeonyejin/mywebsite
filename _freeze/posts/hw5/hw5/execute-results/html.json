{
  "hash": "b4964a0487057681248f9148a569595d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: hw5\nauthor: 연예진\ndata: 2024 -07-29\ncategories:\n  - bigdata\n---\n\n##균일분포 (3, 7)에서 20개의 표본을 뽑아서 분산을 2가지 방법으로 추정해보세요.\nX ~ 균일분포U(a , b) loc:a, scale: b-a\n\n::: {#aeb582e2 .cell execution_count=1}\n``` {.python .cell-code}\nfrom scipy.stats import uniform\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nx=uniform.rvs(loc=3, scale=4, size=20*1000)\nx = x.reshape(-1, 20)\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\narray([[5.29330147, 4.39428352, 6.42822502, ..., 6.79057362, 5.55651221,\n        3.34313017],\n       [6.4768073 , 5.65541085, 6.21875244, ..., 5.4944167 , 3.07273137,\n        5.29697908],\n       [3.01763699, 3.2014101 , 3.29594486, ..., 6.43641162, 3.80152935,\n        4.7324298 ],\n       ...,\n       [5.80273626, 4.6790122 , 4.35367356, ..., 3.0799694 , 3.95011226,\n        4.1199749 ],\n       [5.34546413, 4.10100921, 5.12237651, ..., 4.36858918, 6.31719593,\n        4.1387256 ],\n       [5.11046292, 4.54138216, 6.69584978, ..., 6.21739402, 5.13995442,\n        4.68177049]])\n```\n:::\n:::\n\n\n##n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고,\nn-1로 나눈 것을 s_2\n\n::: {#f83c2b8b .cell execution_count=2}\n``` {.python .cell-code}\nx=uniform.rvs(loc=3, scale=4, size=20*1000)\nx = x.reshape(-1, 20)\nx\ns_2=np.var(x, ddof=1)\ns_2\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nnp.float64(1.3387673411292365)\n```\n:::\n:::\n\n\nn으로 나눈 것을 k_2\n\n::: {#20499d30 .cell execution_count=3}\n``` {.python .cell-code}\nx=uniform.rvs(loc=3, scale=4, size=20*1000)\nx = x.reshape(-1, 20)\nx\nk_2=np.var(x,ddof=0)\nk_2\n\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nnp.float64(1.338168109779997)\n```\n:::\n:::\n\n\n##s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n\n S_2의 분포\n\n::: {#1374009d .cell execution_count=4}\n``` {.python .cell-code}\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nx.shape\ns_2=np.var(x, ddof=1, axis=1)\n\nsns.histplot(s_2)\nplt.show()\nplt.clf()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](hw5_files/figure-html/cell-5-output-1.png){width=593 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\nk_2의 분포\n\n::: {#06e21d7b .cell execution_count=5}\n``` {.python .cell-code}\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nx.shape\nk_2=np.var(x, ddof=0, axis=1)\n\nsns.histplot(k_2)\nplt.show()\nplt.clf()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](hw5_files/figure-html/cell-6-output-1.png){width=593 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n##각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\ns_2의 분포 \n\n::: {#855955e5 .cell execution_count=6}\n``` {.python .cell-code}\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\ns_2=np.var(x, ddof=1, axis=1)\n\nsns.histplot(s_2)\nplt.axvline(x.var(), color='green',\n            linestyle='--', linewidth=2)\nplt.show()\nplt.clf()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](hw5_files/figure-html/cell-7-output-1.png){width=593 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\nk_2의 분포\n\n::: {#4c8e4bdd .cell execution_count=7}\n``` {.python .cell-code}\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nk_2=np.var(x, ddof=0, axis=1)\n\nsns.histplot(k_2)\nplt.axvline(x.var(), color='green',\n            linestyle='--', linewidth=2)\nplt.show()\nplt.clf()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](hw5_files/figure-html/cell-8-output-1.png){width=593 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n##결과를 살펴보고, 왜 n-1로 나눈 것을 \n##분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\n\n",
    "supporting": [
      "hw5_files"
    ],
    "filters": [],
    "includes": {}
  }
}