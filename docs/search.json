[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "testwebsite",
    "section": "",
    "text": "안녕하세요\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "index.html#홈페이지-첫-화면-입니다",
    "href": "index.html#홈페이지-첫-화면-입니다",
    "title": "testwebsite",
    "section": "",
    "text": "안녕하세요\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"col1\": [1, 2, 3]\n})"
  },
  {
    "objectID": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"col1\": [1, 2, 3]\n})"
  },
  {
    "objectID": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요.",
    "href": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요.",
    "title": "hw1",
    "section": "다음 표의 내용을 데이터 프레임으로 만들어 출력해보세요.",
    "text": "다음 표의 내용을 데이터 프레임으로 만들어 출력해보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\n\n\n\n\n\n\n\nproduct\nprice\nvolume\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n##앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\ndf_mean =sum(df[\"price\"]) / 3\n\ndf_mean \n\n2100.0\n\n\n과일 가격의 평균은 2100 원이다.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\n\ndf_mean_v = sum(df[\"volume\"]) /3\n\ndf_mean_v\n\n25.0\n\n\n과일의 판매량 평균은 25이다."
  },
  {
    "objectID": "hw1.html#p115-mpg데이터를-이용해-분석문제-해결하기",
    "href": "hw1.html#p115-mpg데이터를-이용해-분석문제-해결하기",
    "title": "hw1",
    "section": "p115 mpg데이터를 이용해 분석문제 해결하기",
    "text": "p115 mpg데이터를 이용해 분석문제 해결하기\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\nQ2, 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\ndf_new = df_new.rename(columns = {'cty' : 'city'})\ndf_new = df_new.rename(columns = {'hwy' : 'highway'})\ndf_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\ndf_new = df_new.rename(columns = {'cty' : 'city'})\ndf_new = df_new.rename(columns = {'hwy' : 'highway'})\ndf_new\n\ndf_new[['city','highway']]\n\n\n\n\n\n\n\n\ncity\nhighway\n\n\n\n\n0\n18\n29\n\n\n1\n21\n29\n\n\n2\n20\n31\n\n\n3\n21\n30\n\n\n4\n16\n26\n\n\n...\n...\n...\n\n\n229\n19\n28\n\n\n230\n21\n29\n\n\n231\n16\n26\n\n\n232\n18\n26\n\n\n233\n17\n26\n\n\n\n\n234 rows × 2 columns\n\n\n\n##p130 midwest.csv는 미국 동북중부(East North Central States) 437개 지역의 인구 통계 정보를 담고 있습니다. midwest.csv를 이용해 데이터 분석문제를 해결해 보세요.\nQ1. midwesst.csv를 불러와 데이터의 특징을 파악하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\n\ndf.shape\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\n\ndf_new[['total','asian']]\n\n\n\n\n\n\n\n\ntotal\nasian\n\n\n\n\n0\n66090\n249\n\n\n1\n10626\n48\n\n\n2\n14991\n16\n\n\n3\n30806\n150\n\n\n4\n5836\n5\n\n\n...\n...\n...\n\n\n432\n304715\n2699\n\n\n433\n46104\n92\n\n\n434\n19385\n43\n\n\n435\n140320\n1728\n\n\n436\n73605\n722\n\n\n\n\n437 rows × 2 columns\n\n\n\nQ3. total, asian변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\n\ndf_new['per'] =(df_new['asian']/df_new['total'])* 100\ndf_new\n\ndf_new['per'].plot.hist()\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\ndf_new['per'] =(df_new['asian']/df_new['total'])*100\ndf_new\ndf_new['per'].mean() \n\n\ndf_new['size'] = np.where(df_new['per'] &gt; 0.4872, 'large', 'small' )\ndf_new['size']\n\n0      small\n1      small\n2      small\n3      small\n4      small\n       ...  \n432    large\n433    small\n434    small\n435    large\n436    large\nName: size, Length: 437, dtype: object\n\n\nQ5. ’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\ndf_new['per'] =(df_new['asian']/df_new['total'])*100\ndf_new\ndf_new['per'].mean() \n\n\ndf_new['size'] = np.where(df_new['per'] &gt; 0.4872, 'large', 'small' )\ndf_new['size']\n\ncount_test = df_new['size'].value_counts()\ncount_test.plot.bar(rot = 0)"
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf4 = df.query('displ&lt;= 4')\ndf5 = df.query('displ&gt;= 5')\n\ndf4['hwy'].mean()\ndf5['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n배기량이 4이하인 자동차의 hwy평균이 더 높다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)의 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_audi = df.query('manufacturer == \"audi\"')\ndf_toyota = df.query('manufacturer == \"toyota\"')\n\n\ndf_audi['cty'].mean()\ndf_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\ntoyoya의 cty 평균이 더 높은 것을 알 수 있다.\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_new = df.query('manufacturer in[\"chevrolet\", \"ford\", \"honda\"]')\n\ndf_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "hw2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf4 = df.query('displ&lt;= 4')\ndf5 = df.query('displ&gt;= 5')\n\ndf4['hwy'].mean()\ndf5['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n배기량이 4이하인 자동차의 hwy평균이 더 높다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)의 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_audi = df.query('manufacturer == \"audi\"')\ndf_toyota = df.query('manufacturer == \"toyota\"')\n\n\ndf_audi['cty'].mean()\ndf_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\ntoyoya의 cty 평균이 더 높은 것을 알 수 있다.\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_new = df.query('manufacturer in[\"chevrolet\", \"ford\", \"honda\"]')\n\ndf_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#p153-mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "hw2.html#p153-mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "hw2",
    "section": "p153 mpg 데이터를 이용해 분석 문제를 해결해 보세요.",
    "text": "p153 mpg 데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. ’audi’에서 생산한 자동차 중 어떤 자동차 모델위 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf.query('manufacturer == \"audi\"')\\\n  .sort_values('hwy', ascending = False)\\\n  .head(5)\n\n\n\n#df_audi = df.query('manufacturer == \"audi\"')\n#df_audi.sort_values('hwy', ascending = False).head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "hw2.html#p158-mpg데이터를-이용해-분석문제를-해결해-보세요.",
    "href": "hw2.html#p158-mpg데이터를-이용해-분석문제를-해결해-보세요.",
    "title": "hw2",
    "section": "p158 mpg데이터를 이용해 분석문제를 해결해 보세요.",
    "text": "p158 mpg데이터를 이용해 분석문제를 해결해 보세요.\nmpg데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니다. 두 변수를 각각 활용하는 대신 하나의 합산 연비 변수를 만들어 분석하려고 합니다.\nQ1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg.assign( total = mpg['cty'] + mpg['hwy'])\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg.assign( total = mpg['cty'] + mpg['hwy'],\n            mean = (mpg['cty'] + mpg['hwy'])/2)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg = mpg.assign(\n        total = mpg['cty'] + mpg['hwy'],\n        mean = (mpg['cty'] + mpg['hwy'])/2)\n\nmean = (mpg['cty'] + mpg['hwy'])/2\nmpg.sort_values('mean', ascending = False)\\\n.head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg원본을 이용하세요.\n\nimport pandas as pd\n\nmpg = pd.read_csv('mpg.csv')\nmpg = mpg.assign(\n            total = lambda x:  x['cty'] + x['hwy'],\n            mean = lambda x : x['total']/2) \\\n         .sort_values('mean', ascending = False )\\\n         .head(3)\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "빅데이터 스쿨 Homework2",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf4 = df.query('displ&lt;= 4')\ndf5 = df.query('displ&gt;= 5')\n\ndf4['hwy'].mean()\ndf5['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n배기량이 4이하인 자동차의 hwy평균이 더 높다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)의 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_audi = df.query('manufacturer == \"audi\"')\ndf_toyota = df.query('manufacturer == \"toyota\"')\n\n\ndf_audi['cty'].mean()\ndf_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\ntoyoya의 cty 평균이 더 높은 것을 알 수 있다.\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_new = df.query('manufacturer in[\"chevrolet\", \"ford\", \"honda\"]')\n\ndf_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework2",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf4 = df.query('displ&lt;= 4')\ndf5 = df.query('displ&gt;= 5')\n\ndf4['hwy'].mean()\ndf5['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n배기량이 4이하인 자동차의 hwy평균이 더 높다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)의 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_audi = df.query('manufacturer == \"audi\"')\ndf_toyota = df.query('manufacturer == \"toyota\"')\n\n\ndf_audi['cty'].mean()\ndf_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\ntoyoya의 cty 평균이 더 높은 것을 알 수 있다.\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_new = df.query('manufacturer in[\"chevrolet\", \"ford\", \"honda\"]')\n\ndf_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#p153-mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw2/index.html#p153-mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework2",
    "section": "p153 mpg 데이터를 이용해 분석 문제를 해결해 보세요.",
    "text": "p153 mpg 데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. ’audi’에서 생산한 자동차 중 어떤 자동차 모델위 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf.query('manufacturer == \"audi\"')\\\n  .sort_values('hwy', ascending = False)\\\n  .head(5)\n\n\n\n#df_audi = df.query('manufacturer == \"audi\"')\n#df_audi.sort_values('hwy', ascending = False).head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#p158-mpg데이터를-이용해-분석문제를-해결해-보세요.",
    "href": "posts/hw2/index.html#p158-mpg데이터를-이용해-분석문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework2",
    "section": "p158 mpg데이터를 이용해 분석문제를 해결해 보세요.",
    "text": "p158 mpg데이터를 이용해 분석문제를 해결해 보세요.\nmpg데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니다. 두 변수를 각각 활용하는 대신 하나의 합산 연비 변수를 만들어 분석하려고 합니다.\nQ1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg.assign( total = mpg['cty'] + mpg['hwy'])\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg.assign( total = mpg['cty'] + mpg['hwy'],\n            mean = (mpg['cty'] + mpg['hwy'])/2)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg = mpg.assign(\n        total = mpg['cty'] + mpg['hwy'],\n        mean = (mpg['cty'] + mpg['hwy'])/2)\n\nmean = (mpg['cty'] + mpg['hwy'])/2\nmpg.sort_values('mean', ascending = False)\\\n.head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg원본을 이용하세요.\n\nimport pandas as pd\n\nmpg = pd.read_csv('mpg.csv')\nmpg = mpg.assign(\n            total = lambda x:  x['cty'] + x['hwy'],\n            mean = lambda x : x['total']/2) \\\n         .sort_values('mean', ascending = False )\\\n         .head(3)\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "글 목록",
    "section": "",
    "text": "빅데이터 스쿨 Homework1\n\n\n\nbigdata\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\n빅데이터 스쿨 Homework2\n\n\n\nbigdata\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\n빅데이터 스쿨 Homework3\n\n\n\nbigdata\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\nhw4\n\n\n\nbigdata\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\nhw5\n\n\n\nbigdata\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\nhw6\n\n\n\nbigdata\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\nhw7\n\n\n\nbigdata\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\nhw8\n\n\n\nbigdata\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\nhw9\n\n\n\nbigdata\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "빅데이터 스쿨 Homework1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"col1\": [1, 2, 3]\n})"
  },
  {
    "objectID": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "빅데이터 스쿨 Homework1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"col1\": [1, 2, 3]\n})"
  },
  {
    "objectID": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요.",
    "href": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요.",
    "title": "빅데이터 스쿨 Homework1",
    "section": "다음 표의 내용을 데이터 프레임으로 만들어 출력해보세요.",
    "text": "다음 표의 내용을 데이터 프레임으로 만들어 출력해보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\n\n\n\n\n\n\n\nproduct\nprice\nvolume\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n##앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\ndf_mean =sum(df[\"price\"]) / 3\n\ndf_mean \n\n2100.0\n\n\n과일 가격의 평균은 2100 원이다.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\n\ndf_mean_v = sum(df[\"volume\"]) /3\n\ndf_mean_v\n\n25.0\n\n\n과일의 판매량 평균은 25이다."
  },
  {
    "objectID": "posts/hw1/index.html#p115-mpg데이터를-이용해-분석문제-해결하기",
    "href": "posts/hw1/index.html#p115-mpg데이터를-이용해-분석문제-해결하기",
    "title": "빅데이터 스쿨 Homework1",
    "section": "p115 mpg데이터를 이용해 분석문제 해결하기",
    "text": "p115 mpg데이터를 이용해 분석문제 해결하기\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\nQ2, 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\ndf_new = df_new.rename(columns = {'cty' : 'city'})\ndf_new = df_new.rename(columns = {'hwy' : 'highway'})\ndf_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\ndf_new = df_new.rename(columns = {'cty' : 'city'})\ndf_new = df_new.rename(columns = {'hwy' : 'highway'})\ndf_new\n\ndf_new[['city','highway']]\n\n\n\n\n\n\n\n\ncity\nhighway\n\n\n\n\n0\n18\n29\n\n\n1\n21\n29\n\n\n2\n20\n31\n\n\n3\n21\n30\n\n\n4\n16\n26\n\n\n...\n...\n...\n\n\n229\n19\n28\n\n\n230\n21\n29\n\n\n231\n16\n26\n\n\n232\n18\n26\n\n\n233\n17\n26\n\n\n\n\n234 rows × 2 columns\n\n\n\n##p130 midwest.csv는 미국 동북중부(East North Central States) 437개 지역의 인구 통계 정보를 담고 있습니다. midwest.csv를 이용해 데이터 분석문제를 해결해 보세요.\nQ1. midwesst.csv를 불러와 데이터의 특징을 파악하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\n\ndf.shape\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\n\ndf_new[['total','asian']]\n\n\n\n\n\n\n\n\ntotal\nasian\n\n\n\n\n0\n66090\n249\n\n\n1\n10626\n48\n\n\n2\n14991\n16\n\n\n3\n30806\n150\n\n\n4\n5836\n5\n\n\n...\n...\n...\n\n\n432\n304715\n2699\n\n\n433\n46104\n92\n\n\n434\n19385\n43\n\n\n435\n140320\n1728\n\n\n436\n73605\n722\n\n\n\n\n437 rows × 2 columns\n\n\n\nQ3. total, asian변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\n\ndf_new['per'] =(df_new['asian']/df_new['total'])* 100\ndf_new\n\ndf_new['per'].plot.hist()\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\ndf_new['per'] =(df_new['asian']/df_new['total'])*100\ndf_new\ndf_new['per'].mean() \n\n\ndf_new['size'] = np.where(df_new['per'] &gt; 0.4872, 'large', 'small' )\ndf_new['size']\n\n0      small\n1      small\n2      small\n3      small\n4      small\n       ...  \n432    large\n433    small\n434    small\n435    large\n436    large\nName: size, Length: 437, dtype: object\n\n\nQ5. ’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\ndf_new['per'] =(df_new['asian']/df_new['total'])*100\ndf_new\ndf_new['per'].mean() \n\n\ndf_new['size'] = np.where(df_new['per'] &gt; 0.4872, 'large', 'small' )\ndf_new['size']\n\ncount_test = df_new['size'].value_counts()\ncount_test.plot.bar(rot = 0)"
  },
  {
    "objectID": "mpg.html",
    "href": "mpg.html",
    "title": "교과서 챕터8",
    "section": "",
    "text": "##빈도 막대 그래프 그리기\n데이터 불러오기\nimport pandas as pd\n\nmpg= pd.read_csv(\"mpg.csv\")\nmpg.shape\n\n(234, 11)\nSeaborn 패키지 불러오기\nimport seaborn as sns\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/hw3/index3.html",
    "href": "posts/hw3/index3.html",
    "title": "빅데이터 스쿨 Homework3",
    "section": "",
    "text": "Q1. mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비)간에 어떤 관계가 있는지 알아보려고 합니다 x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nmpg=pd.read_csv('mpg.csv')\n\nimport seaborn as sns\nsns.scatterplot(data=mpg, x='cty', y='hwy')\n\n\n\n\n\n\n\n\nQ2. 미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nimport pandas as pd\nmidwest=pd.read_csv('midwest.csv')\n\nimport seaborn as sns\nsns.scatterplot(data=midwest, x = 'poptotal', y = 'popasian')\\\n   .set(xlim = [0,500000], ylim = [0, 10000])"
  },
  {
    "objectID": "posts/hw3/index3.html#p204-mpg-데이터와-midwest-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw3/index3.html#p204-mpg-데이터와-midwest-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework3",
    "section": "",
    "text": "Q1. mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비)간에 어떤 관계가 있는지 알아보려고 합니다 x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nmpg=pd.read_csv('mpg.csv')\n\nimport seaborn as sns\nsns.scatterplot(data=mpg, x='cty', y='hwy')\n\n\n\n\n\n\n\n\nQ2. 미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nimport pandas as pd\nmidwest=pd.read_csv('midwest.csv')\n\nimport seaborn as sns\nsns.scatterplot(data=midwest, x = 'poptotal', y = 'popasian')\\\n   .set(xlim = [0,500000], ylim = [0, 10000])"
  },
  {
    "objectID": "posts/hw3/index3.html#p211-mpg데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw3/index3.html#p211-mpg데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework3",
    "section": "p211 mpg데이터를 이용해 분석 문제를 해결해 보세요.",
    "text": "p211 mpg데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. 어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시 연비)평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nimport pandas as pd\nmpg = pd.read_csv('mpg.csv')\n\ndf_mpg = mpg.query('category==\"suv\"')\\\n           .groupby('manufacturer', as_index=False)\\\n           .agg(cty_mean=('cty', 'mean'))\\\n           .sort_values('cty_mean', ascending=False)\\\n           .head()\ndf_mpg\n\nimport seaborn as sns\nsns.barplot(data=df_mpg, x = 'manufacturer', y='cty_mean')\n\n\n\n\n\n\n\n\nQ2. 자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\ndf1_mpg = mpg.groupby('category', as_index = False)\\\n             .agg(n = ('category', 'count'))\\\n             .sort_values('n', ascending = False)\ndf1_mpg\n\nsns.barplot(data = df1_mpg, x = 'category', y = 'n')"
  },
  {
    "objectID": "mpg.html#선-그래프-만들기",
    "href": "mpg.html#선-그래프-만들기",
    "title": "교과서 챕터8",
    "section": "선 그래프 만들기",
    "text": "선 그래프 만들기\neconomics 불러오고 선 그래프 만들기기\n\neconomics = pd.read_csv('economics.csv')\neconomics\nimport plotly.express as px\npx.line(data_frame = economics, x = 'date', y= 'psavert')"
  },
  {
    "objectID": "finala-group.html",
    "href": "finala-group.html",
    "title": "project1 - 기역조",
    "section": "",
    "text": "대한민국 연령별, 지역별 출생율 비교분석"
  },
  {
    "objectID": "finala-group.html#q-8년동안-청년층과-비청년층-사이에-출산율이-어떻게-변했을까",
    "href": "finala-group.html#q-8년동안-청년층과-비청년층-사이에-출산율이-어떻게-변했을까",
    "title": "project1 - 기역조",
    "section": "Q 8년동안 청년층과 비청년층 사이에 출산율이 어떻게 변했을까?",
    "text": "Q 8년동안 청년층과 비청년층 사이에 출산율이 어떻게 변했을까?\n20-22년도 데이터 추출\n\n전국 모의연령별 출산율 비교를 위한 iloc 활용\n기간: 2020~2022\n그룹: 청년 / 비청년\n\n\nbr2 = br.iloc[[0]]\ntype(br2[\"21_2024\"][0])\nbr2 = br2.iloc[:, 57:78] \nbr2\n\n\n\n\n\n\n\n\n20_1519\n20_2024\n20_2529\n20_3034\n20_3539\n20_4044\n20_4549\n21_1519\n21_2024\n21_2529\n...\n21_3539\n21_4044\n21_4549\n22_1519\n22_2024\n22_2529\n22_3034\n22_3539\n22_4044\n22_4549\n\n\n\n\n0\n0.7\n6.2\n30.6\n78.9\n42.3\n7.1\n0.2\n0.4\n5.0\n27.5\n...\n43.5\n7.6\n0.2\n0.4\n4.1\n24.0\n73.5\n44.1\n8.0\n0.2\n\n\n\n\n1 rows × 21 columns\n\n\n\n보기 쉽게 만들기 위해 행렬을 뒤집는 transpose 함수 사용\n\nbr2 = br2.transpose()\nbr2\n\n\n\n\n\n\n\n\n0\n\n\n\n\n20_1519\n0.7\n\n\n20_2024\n6.2\n\n\n20_2529\n30.6\n\n\n20_3034\n78.9\n\n\n20_3539\n42.3\n\n\n20_4044\n7.1\n\n\n20_4549\n0.2\n\n\n21_1519\n0.4\n\n\n21_2024\n5.0\n\n\n21_2529\n27.5\n\n\n21_3034\n76.1\n\n\n21_3539\n43.5\n\n\n21_4044\n7.6\n\n\n21_4549\n0.2\n\n\n22_1519\n0.4\n\n\n22_2024\n4.1\n\n\n22_2529\n24.0\n\n\n22_3034\n73.5\n\n\n22_3539\n44.1\n\n\n22_4044\n8.0\n\n\n22_4549\n0.2\n\n\n\n\n\n\n\n새로운 변수명 설정\n\n0 -&gt; birth_rate(모의연령별 출산율)\n비어있는열 -&gt; year\n\n\nbr2 = br2.rename(columns = {0 : 'birth_rate'})\nbr2 = br2.rename_axis(columns = {'' : 'year'}, index = None)\nbr2 = br2.reset_index().rename(columns={'index': 'year'})\nbr2\n\n\n\n\n\n\n\n\nyear\nbirth_rate\n\n\n\n\n0\n20_1519\n0.7\n\n\n1\n20_2024\n6.2\n\n\n2\n20_2529\n30.6\n\n\n3\n20_3034\n78.9\n\n\n4\n20_3539\n42.3\n\n\n5\n20_4044\n7.1\n\n\n6\n20_4549\n0.2\n\n\n7\n21_1519\n0.4\n\n\n8\n21_2024\n5.0\n\n\n9\n21_2529\n27.5\n\n\n10\n21_3034\n76.1\n\n\n11\n21_3539\n43.5\n\n\n12\n21_4044\n7.6\n\n\n13\n21_4549\n0.2\n\n\n14\n22_1519\n0.4\n\n\n15\n22_2024\n4.1\n\n\n16\n22_2529\n24.0\n\n\n17\n22_3034\n73.5\n\n\n18\n22_3539\n44.1\n\n\n19\n22_4044\n8.0\n\n\n20\n22_4549\n0.2\n\n\n\n\n\n\n\nnp.where함수로 청년층과 비청년층 구분\n\n청년층: 1, 비청년층: 2 할당\n\n\nbr2['number'] = np.where(br2['year']\\\n                  .isin(['20_2024', '20_2529', '20_3034', '21_2024', '21_2529', '21_3034', '22_2024', '22_2529', '22_3034']), 1, 2)\nbr2\n\n\n\n\n\n\n\n\nyear\nbirth_rate\nnumber\n\n\n\n\n0\n20_1519\n0.7\n2\n\n\n1\n20_2024\n6.2\n1\n\n\n2\n20_2529\n30.6\n1\n\n\n3\n20_3034\n78.9\n1\n\n\n4\n20_3539\n42.3\n2\n\n\n5\n20_4044\n7.1\n2\n\n\n6\n20_4549\n0.2\n2\n\n\n7\n21_1519\n0.4\n2\n\n\n8\n21_2024\n5.0\n1\n\n\n9\n21_2529\n27.5\n1\n\n\n10\n21_3034\n76.1\n1\n\n\n11\n21_3539\n43.5\n2\n\n\n12\n21_4044\n7.6\n2\n\n\n13\n21_4549\n0.2\n2\n\n\n14\n22_1519\n0.4\n2\n\n\n15\n22_2024\n4.1\n1\n\n\n16\n22_2529\n24.0\n1\n\n\n17\n22_3034\n73.5\n1\n\n\n18\n22_3539\n44.1\n2\n\n\n19\n22_4044\n8.0\n2\n\n\n20\n22_4549\n0.2\n2\n\n\n\n\n\n\n\n\n청년, 비청년 출산율비교\n20~22년 청년 비청년 모의 출산율\n청년층의 출산율을 알아보기 위해서는 br2 데이터에서 number == 1를 추출하여 평균을 구함 비청년도 같은 방식으로 진행\n\nbr2_youth_rate = br2.query('number == 1')['birth_rate'].mean()\nbr2_non_youth_rate = br2.query('number == 2')['birth_rate'].mean()\n\nprint('청년: ', br2_youth_rate)\nprint('비청년: ', br2_non_youth_rate)\n\n청년:  36.21111111111111\n비청년:  12.891666666666666\n\n\n12~14년 청년 비청년 모의 출산율\n\nbr3= br.iloc[:, 1:21] ## 12-14년도 데이터 추출\nbr3 = br3.iloc[[0]]\n\nbr3 = br3.transpose()\n\nbr3 = br3.rename(columns = {0 : 'birth_rate'})\nbr3 = br3.rename_axis(columns = {'' : 'year'}, index = None)\nbr3 = br3.reset_index().rename(columns={'index': 'year'})\n\nbr3['number'] = np.where(br3['year']\\\n                  .isin(['12_2024', '12_2529', '12_3034', '13_2024', '13_2529', '13_3034', '14_2024', '14_2529', '14_3034']), 1, 2)\n\n\nbr3_youth_rate = br3.query('number == 1')['birth_rate'].mean()\nbr3_non_youth_rate = br3.query('number == 2')['birth_rate'].mean()\n\nprint('청년: ', br3_youth_rate)\nprint('비청년: ', br3_non_youth_rate)\n\n청년:  66.32222222222222\n비청년:  12.909090909090908\n\n\n그래프 표현\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndata = pd.DataFrame({\n    'Age Group': ['12_14Youth', '20_22Youth', '12_14Non-Youth', '20_22Non-Youth'],\n    'Mean Birth Rate': [br3_youth_rate, br2_youth_rate, br3_non_youth_rate, br2_non_youth_rate],\n    'Youth': ['Youth', 'Youth', 'Non-Youth', 'Non-Youth']\n})\n\nsns.barplot(x='Age Group', y='Mean Birth Rate', hue='Youth', data=data)\nplt.xlabel('Age Group', fontsize=12)\nplt.ylabel('Mean Birth Rate', fontsize=12)\nplt.title('12-14/20-22 Mean Birth Rate Comparison', fontsize=15)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "finala-group.html#결과",
    "href": "finala-group.html#결과",
    "title": "project1 - 기역조",
    "section": "결과",
    "text": "결과\n- 과거대비 청년층의 출산율 감소\n- 비청년층 출산율 변화 없음"
  },
  {
    "objectID": "finala-group.html#q-전국-평균-대비-시도별-청년층의-출산율-비교",
    "href": "finala-group.html#q-전국-평균-대비-시도별-청년층의-출산율-비교",
    "title": "project1 - 기역조",
    "section": "Q 전국 평균 대비 시도별 청년층의 출산율 비교",
    "text": "Q 전국 평균 대비 시도별 청년층의 출산율 비교\n청년층의 출산율이 높은 지역 상위5 & 하위5\n\nprint('상위' + '\\n')\nprint(br[['시군구별', \"mean20\"]].sort_values(\"mean20\", ascending = False).head(), \"\\n\", \"-------------------------\")\nprint(br[['시군구별', \"mean21\"]].sort_values(\"mean21\", ascending = False).head(), \"\\n\", \"-------------------------\")\nprint(br[['시군구별', \"mean22\"]].sort_values(\"mean22\", ascending = False).head(), \"\\n\", \"--------------------------\")\n\nprint('하위' + '\\n')\nprint(br[['시군구별', \"mean20\"]].sort_values(\"mean20\").head(), \"\\n\", \"--------------------------\")\nprint(br[['시군구별', \"mean21\"]].sort_values(\"mean21\").head(), \"\\n\", \"--------------------------\")\nprint(br[['시군구별', \"mean22\"]].sort_values(\"mean22\").head())\n\n상위\n\n       시군구별     mean20\n8   세종특별자치시  64.233333\n14     전라남도  56.266667\n12     충청남도  52.100000\n10      강원도  51.300000\n7     울산광역시  49.700000 \n -------------------------\n       시군구별     mean21\n8   세종특별자치시  63.000000\n14     전라남도  49.333333\n10      강원도  47.566667\n12     충청남도  47.533333\n15     경상북도  46.733333 \n -------------------------\n       시군구별     mean22\n8   세종특별자치시  53.066667\n10      강원도  46.033333\n14     전라남도  45.600000\n15     경상북도  44.500000\n12     충청남도  44.400000 \n --------------------------\n하위\n\n    시군구별     mean20\n1  서울특별시  25.700000\n2  부산광역시  33.933333\n5  광주광역시  37.233333\n6  대전광역시  37.366667\n4  인천광역시  38.033333 \n --------------------------\n    시군구별     mean21\n1  서울특별시  23.833333\n2  부산광역시  31.633333\n4  인천광역시  34.600000\n3  대구광역시  35.466667\n0     전국  36.200000 \n --------------------------\n    시군구별     mean22\n1  서울특별시  21.600000\n2  부산광역시  30.900000\n4  인천광역시  32.233333\n0     전국  33.866667\n3  대구광역시  34.100000\n\n\n각 도시 청년층의 평균모의출산율 그래프\n\nimport seaborn as sns\nplt.rcParams.update({'font.family' : 'Malgun Gothic'})\nnew = br[['시군구별', 'mean20']].sort_values(\"mean20\", ascending=False)\nplt.figure(figsize=(7, 3))\nsns.barplot(data=new, x='시군구별', y='mean20')\nplt.xticks(rotation=45)  \nplt.xlabel('시군구별', fontsize=12)\nplt.ylabel('Mean Birth Rate 2020', fontsize=12)\nplt.title('Mean Birth Rate  2020년도 시군구별 ', fontsize=15)\nplt.show()\n\n\n\n\n\n\n\n\n\nnew = br[['시군구별', 'mean21']].sort_values(\"mean21\", ascending=False)\nplt.figure(figsize=(7, 3))\nsns.barplot(data=new, x='시군구별', y='mean21')\nplt.xticks(rotation=45)  \nplt.xlabel('시군구별', fontsize=12)\nplt.ylabel('Mean Birth Rate 2021', fontsize=12)\nplt.title('Mean Birth Rate  2021년도 시군구별 ', fontsize=15)\nplt.show()\n\n\n\n\n\n\n\n\n\nnew = br[['시군구별', 'mean22']].sort_values(\"mean22\", ascending=False)\nplt.figure(figsize=(7, 3))\nsns.barplot(data=new, x='시군구별', y='mean22')\nplt.xticks(rotation=45)  \nplt.xlabel('시군구별', fontsize=12)\nplt.ylabel('Mean Birth Rate 2022', fontsize=12)\nplt.title('Mean Birth Rate  2022년도 시군구별 ', fontsize=15)\nplt.show()"
  },
  {
    "objectID": "finala-group.html#결과-1",
    "href": "finala-group.html#결과-1",
    "title": "project1 - 기역조",
    "section": "결과",
    "text": "결과\n\n가장 높은 출산율을 보여주는 도시 = 세종특별자치시\n가장 낮은 출산율을 보여주는 도시 = 서울특별시"
  },
  {
    "objectID": "posts/hw4/hw4.html",
    "href": "posts/hw4/hw4.html",
    "title": "hw4",
    "section": "",
    "text": "#숙제1번 import scipy.stat import norm 사용금지 # 1. 정규분포 pdf 값을 계산하는 자신만의 # 파이썬 함수를 정의하고, # 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef my_pdf (x, mu, sigma):\n    part_1 = 1 / (sigma * math.sqrt(2 * math.pi))\n    part_2 = math.exp(-0.5 * ((x - mu) ** 2) / (sigma ** 2))\n    return part_1 * part_2\n\nmu = 3\nsigma = 2\nx_values=np.linspace(-3, 10, 100)\npdf_values = [my_pdf(x, mu, sigma) for x in x_values]\nplt.plot(x_values, pdf_values, color=\"black\")\nplt.show()"
  },
  {
    "objectID": "posts/hw4/hw4.html#숙제-qmd",
    "href": "posts/hw4/hw4.html#숙제-qmd",
    "title": "hw4",
    "section": "",
    "text": "#숙제1번 import scipy.stat import norm 사용금지 # 1. 정규분포 pdf 값을 계산하는 자신만의 # 파이썬 함수를 정의하고, # 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef my_pdf (x, mu, sigma):\n    part_1 = 1 / (sigma * math.sqrt(2 * math.pi))\n    part_2 = math.exp(-0.5 * ((x - mu) ** 2) / (sigma ** 2))\n    return part_1 * part_2\n\nmu = 3\nsigma = 2\nx_values=np.linspace(-3, 10, 100)\npdf_values = [my_pdf(x, mu, sigma) for x in x_values]\nplt.plot(x_values, pdf_values, color=\"black\")\nplt.show()"
  },
  {
    "objectID": "hw4.html",
    "href": "hw4.html",
    "title": "hw4",
    "section": "",
    "text": "#숙제1번 import scipy.stat import norm 사용금지 # 1. 정규분포 pdf 값을 계산하는 자신만의 # 파이썬 함수를 정의하고, # 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef my_pdf (x, mu, sigma):\n    part_1 = 1 / (sigma * math.sqrt(2 * math.pi))\n    part_2 = math.exp(-0.5 * ((x - mu) ** 2) / (sigma ** 2))\n    return part_1 * part_2\n\nmu = 3\nsigma = 2\nx_values=np.linspace(-10, 10, 100)\npdf_values = [my_pdf(x, mu, sigma) for x in x_values]\nplt.plot(x_values, pdf_values, color=\"black\")\nplt.show()"
  },
  {
    "objectID": "hw4.html#숙제-qmd",
    "href": "hw4.html#숙제-qmd",
    "title": "hw4",
    "section": "",
    "text": "#숙제1번 import scipy.stat import norm 사용금지 # 1. 정규분포 pdf 값을 계산하는 자신만의 # 파이썬 함수를 정의하고, # 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef my_pdf (x, mu, sigma):\n    part_1 = 1 / (sigma * math.sqrt(2 * math.pi))\n    part_2 = math.exp(-0.5 * ((x - mu) ** 2) / (sigma ** 2))\n    return part_1 * part_2\n\nmu = 3\nsigma = 2\nx_values=np.linspace(-10, 10, 100)\npdf_values = [my_pdf(x, mu, sigma) for x in x_values]\nplt.plot(x_values, pdf_values, color=\"black\")\nplt.show()"
  },
  {
    "objectID": "posts/hw5/hw5.html",
    "href": "posts/hw5/hw5.html",
    "title": "hw5",
    "section": "",
    "text": "X ~ 균일분포U(a , b) loc:a, scale: b-a\n\nfrom scipy.stats import uniform\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nx\n\narray([[3.76120239, 5.25476795, 5.98354159, ..., 5.52052282, 3.46331313,\n        6.36304209],\n       [3.81230237, 5.47790013, 3.54644336, ..., 4.05912271, 4.00232046,\n        4.28419153],\n       [6.87806623, 5.42743101, 5.81590237, ..., 4.85009972, 4.91928014,\n        6.30225275],\n       ...,\n       [3.04980015, 6.81277037, 6.09363572, ..., 4.42111548, 4.91361723,\n        6.45642442],\n       [4.21226644, 4.96664346, 3.23419205, ..., 5.87233621, 3.55780867,\n        4.56675508],\n       [4.58561676, 5.84064522, 4.09444228, ..., 6.49314178, 6.19412452,\n        3.36168373]])"
  },
  {
    "objectID": "posts/hw5/hw5.html#s_2의-분포",
    "href": "posts/hw5/hw5.html#s_2의-분포",
    "title": "hw5",
    "section": "S_2의 분포",
    "text": "S_2의 분포\n\nx=uniform.rvs(loc=3, scale=4, size=20*1000)\nx = x.reshape(-1, 20)\nx.shape\ns_2=np.var(x, ddof=1, axis=1)\n\nsns.histplot(s_2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw5/hw5.html#k_2의-분포",
    "href": "posts/hw5/hw5.html#k_2의-분포",
    "title": "hw5",
    "section": "k_2의 분포",
    "text": "k_2의 분포\n\nx=uniform.rvs(loc=3, scale=4, size=20*1000)\nx = x.reshape(-1, 20)\nx.shape\nk_2=np.var(x, ddof=0, axis=1)\n\nsns.histplot(k_2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n#각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요. #s_2의 분포\n\nx=uniform.rvs(loc=3, scale=4, size=20*1000)\nx = x.reshape(-1, 20)\ns_2=np.var(x, ddof=1, axis=1)\n\nsns.histplot(s_2)\nplt.axvline(x.var(), color='green',\n            linestyle='--', linewidth=2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n#k_2의 분포\n\nx=uniform.rvs(loc=3, scale=4, size=20*1000)\nx = x.reshape(-1, 20)\nk_2=np.var(x, ddof=0, axis=1)\n\nsns.histplot(k_2)\nplt.axvline(x.var(), color='green',\n            linestyle='--', linewidth=2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n#결과를 살펴보고, 왜 n-1로 나눈 것을 #분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!"
  },
  {
    "objectID": "posts/hw5/hw5.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.",
    "href": "posts/hw5/hw5.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.",
    "title": "hw5",
    "section": "",
    "text": "X ~ 균일분포U(a , b) loc:a, scale: b-a\n\nfrom scipy.stats import uniform\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nx\n\narray([[3.76120239, 5.25476795, 5.98354159, ..., 5.52052282, 3.46331313,\n        6.36304209],\n       [3.81230237, 5.47790013, 3.54644336, ..., 4.05912271, 4.00232046,\n        4.28419153],\n       [6.87806623, 5.42743101, 5.81590237, ..., 4.85009972, 4.91928014,\n        6.30225275],\n       ...,\n       [3.04980015, 6.81277037, 6.09363572, ..., 4.42111548, 4.91361723,\n        6.45642442],\n       [4.21226644, 4.96664346, 3.23419205, ..., 5.87233621, 3.55780867,\n        4.56675508],\n       [4.58561676, 5.84064522, 4.09444228, ..., 6.49314178, 6.19412452,\n        3.36168373]])"
  },
  {
    "objectID": "posts/hw5/hw5.html#n-1로-나눈-것을-s_2-n으로-나눈-것을-k_2로-정의하고",
    "href": "posts/hw5/hw5.html#n-1로-나눈-것을-s_2-n으로-나눈-것을-k_2로-정의하고",
    "title": "hw5",
    "section": "n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고,",
    "text": "n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고,\nn-1로 나눈 것을 s_2\n\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nx\ns_2=np.var(x, ddof=1)\ns_2\n\nnp.float64(1.3307334304699165)\n\n\nn으로 나눈 것을 k_2\n\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nx\nk_2=np.var(x,ddof=0)\nk_2\n\nnp.float64(1.3362906966463965)"
  },
  {
    "objectID": "posts/hw5/hw5.html#s_2의-분포와-k_2의-분포를-그려주세요-10000개-사용",
    "href": "posts/hw5/hw5.html#s_2의-분포와-k_2의-분포를-그려주세요-10000개-사용",
    "title": "hw5",
    "section": "s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)",
    "text": "s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\nS_2의 분포\n\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nx.shape\ns_2=np.var(x, ddof=1, axis=1)\n\nsns.histplot(s_2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\nk_2의 분포\n\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nx.shape\nk_2=np.var(x, ddof=0, axis=1)\n\nsns.histplot(k_2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw5/hw5.html#각-분포-그래프에-모분산의-위치에-녹색-막대를-그려주세요.",
    "href": "posts/hw5/hw5.html#각-분포-그래프에-모분산의-위치에-녹색-막대를-그려주세요.",
    "title": "hw5",
    "section": "각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.",
    "text": "각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\ns_2의 분포\n\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\ns_2=np.var(x, ddof=1, axis=1)\n\nsns.histplot(s_2)\nplt.axvline(x.var(), color='green',\n            linestyle='--', linewidth=2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\nk_2의 분포\n\nx=uniform.rvs(loc=3, scale=4, size=20*10000)\nx = x.reshape(-1, 20)\nk_2=np.var(x, ddof=0, axis=1)\n\nsns.histplot(k_2)\nplt.axvline(x.var(), color='green',\n            linestyle='--', linewidth=2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw6/hw6.html",
    "href": "posts/hw6/hw6.html",
    "title": "hw6",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nraw_welfare = pd.read_spss('Koweps_hpwc14_2019_beta2.sav')\nraw_welfare\n\nwelfare=raw_welfare.copy()\nwelfare.shape\nwelfare.describe()\n\nwelfare=welfare.rename(\n    columns = {\n        \"h14_g3\": \"sex\",\n        \"h14_g4\": \"birth\",\n        \"h14_g10\": \"marriage_type\",\n        \"h14_g11\": \"religion\",\n        \"p1402_8aq1\": \"income\",\n        \"h14_eco9\": \"code_job\",\n        \"h14_reg7\": \"code_region\"\n        \n    }\n)\n\nwelfare = welfare[[\"sex\", \"birth\", \"marriage_type\",\n                  \"religion\", \"income\", \"code_job\", \"code_region\"]]\n                  \nwelfare.shape\n\nwelfare[\"sex\"].dtypes\nwelfare[\"sex\"].value_counts()\n#welfare[\"sex\"].isna().sum()\n\n\nwelfare[\"sex\"] = np.where(welfare[\"sex\"] == 1, 'male', 'female')\nwelfare[\"sex\"].value_counts()\n\n\nwelfare[\"income\"].describe()\nwelfare[\"income\"].isna().sum()\n\nsex_income=welfare.dropna(subset=\"income\")\\\n       .groupby(\"sex\", as_index=False)\\\n       .agg(mean_income = (\"income\", \"mean\"))\nsex_income\n\nimport seaborn as sns\nsns.barplot(data=sex_income, x=\"sex\", y=\"mean_income\",\n            hue=\"sex\")\n            \n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n#각 성별 평균을 구분하기 위해 query로 뺌\n\nfemale = welfare.dropna(subset=\"income\").query(\"sex == 'female'\")[\"income\"]\nmale = welfare.dropna(subset=\"income\").query(\"sex == 'male'\")[\"income\"]  \n\n#표본평균\n\nfm=female.mean()\nmm=male.mean()\n\n#데이터 갯수\n\nfc=female.count()\nmc=male.count()\n\n#표준편차\n\nfs=female.std()\nms=male.std()\n\n#분산\n\nfv=female.var()\nmv=male.var()\n\n#신뢰구간\n\nfrom scipy.stats import norm\n\nz_005=norm.ppf(0.95, loc=0, scale=1)\nz_005\nfz_max=fm + z_005 * (fs/ np.sqrt(fc))\nfz_min=fm - z_005 * (fs/ np.sqrt(fc))\n\n\nz_005=norm.ppf(0.95, loc=0, scale=1)\nz_005\nmz_max=mm + z_005 * (ms/ np.sqrt(mc))\nmz_min=mm - z_005 * (ms/ np.sqrt(mc))\n\n\n오차막대 그리기\n\nimport seaborn as sns\nsns.barplot(data=sex_income, x=\"sex\", y=\"mean_income\",\n            hue=\"sex\")\n            \nplt.vlines(x = \"female\", ymin = fz_min, ymax = fz_max, colors = \"black\")\nplt.vlines(x = \"male\", ymin = mz_min, ymax = mz_max, colors = \"black\")            \n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw7/hw7.html",
    "href": "posts/hw7/hw7.html",
    "title": "hw7",
    "section": "",
    "text": "슬통 자동자는 매해 출시되는 신형 자동차의 에너지 소비효율 등급을 1등급으로 유지하고 있다. 22년 개발된 신형 모델이 한국 자동차 평가원에서 설정한 에너지 소비 효율등급 1등급을 받을 수 있을지 검정하려한다. 평가원에 따르면 1등급의 기준은 평균 복합 에너지 소비효율이 16.0 이상인 경우 부여한다고 한다. 다음은 신형 자동차 15대의 복합 에너지소비효율 측정한 결과이다. 15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927, 15.382, 16.709, 16.804 표본에 의하여 판단해볼때, 현대자동차의 신형 모델은 에너지 효율 1등급으로 판단할 수 있을지 판단해보시오. (유의수준 1%로 설정)"
  },
  {
    "objectID": "posts/hw7/hw7.html#숙제-p57-신형-자동차의-에너지-소비효율-등급",
    "href": "posts/hw7/hw7.html#숙제-p57-신형-자동차의-에너지-소비효율-등급",
    "title": "hw7",
    "section": "숙제 p57 신형 자동차의 에너지 소비효율 등급",
    "text": "숙제 p57 신형 자동차의 에너지 소비효율 등급\n\nimport numpy as np\n\nx=np.array([15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927,\n15.382, 16.709, 16.804])\nx.mean()\nx.var()\nstd=x.std()"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Recent posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n빅데이터 스쿨 Homework1\n\n\n\n\n\n\n\n\n\n\n\n빅데이터 스쿨 Homework2\n\n\n\n\n\n\n\n\n\n\n\n빅데이터 스쿨 Homework3\n\n\n\n\n\n\n\n\n\n\n\nhw4\n\n\n\n\n\n\n\n\n\n\n\nhw5\n\n\n\n\n\n\n\n\n\n\n\nhw6\n\n\n\n\n\n\n\n\n\n\n\nhw7\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw8/hw8.html",
    "href": "posts/hw8/hw8.html",
    "title": "hw8",
    "section": "",
    "text": "ADP 표본점수\n2022년에 실시 된 ADP 실기 시험의 통계파트 표준점수는 평균이 30, 표준편차가 5인 정규분포를 따른다고 한다. 1) ADP 실기 시험의 통계파트 표준점수의 밀도함수를 그려보세요.\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nx = np.linspace(15, 45, 500)\ny = norm.pdf(x, loc=30, scale=5)\nplt.plot(x, y) \n\n\n\n\n\n\n\n\n\nADP 수험생을 임의로 1명을 선택하여 통계 점수를 조회했을때 45점 보다 높은 점수를 받았을 확률을 구하세요.\n\n\n1 - norm.cdf(45, 30, 5)\n\nnp.float64(0.0013498980316301035)\n\n\n0.001349\n\n슬통이는 상위 10%에 해당하는 점수를 얻었다고 한다면, 슬통이의 점수는 얼마인지 계산해보세요.\n\n\nnorm.ppf(0.9, 30, 5)\n\nnp.float64(36.407757827723)\n\n\n36.407\n\n슬기로운 통계생활의 해당 회차 수강생은 16명이었다고 한다. 16명의 통계 파트 점수를 평균내었을 때, 이 평균값이 따르는 분포의 확률밀도 함수를 1번의 그래프와 겹쳐 그려보세요.\n\n\nx = np.linspace(15, 45, 500)\ny = norm.pdf(x, loc=30, scale=5)\nplt.plot(x, y) \n\ny2 = norm.pdf(x, loc=30, scale=5/np.sqrt(16))\nplt.plot(x, y2, color=\"red\")\n\n\n\n\n\n\n\n\n\n슬기로운 통계생활 ADP 반 수강생들의 통계점수를 평균내었다고 할 때, 이 값이 38점보다 높게 나올 확률을 구하세요.\n\n\n1-norm.cdf(38, loc=30, scale=5/np.sqrt(16))\n\nnp.float64(7.76885222819601e-11)\n\n\n7.76885222819601e-11\n\n\nCovid 19 발병률\nCovid‑19의 발병률은 1%라고 한다. 다음은 이번 코로나 사태로 인하여 코로나 의심 환자들 1,085명을 대상으로 슬통 회사의 “다잡아” 키트를 사용하여 양성 반응을 체크한 결과이다. 키트  실제 양성 음성 양성 370 10 음성 15 690\n\n다잡아 키트가 코로나 바이러스에 걸린 사람을 양성으로 잡아낼 확률을 계산하세요.\n\n\n370/385\n\n0.961038961038961\n\n\n\n슬통 회사에서 다잡아 키트를 사용해 양성으로 나온 사람이 실제로는 코로나 바이러스에 걸려있을 확률을 97%라며, 키트의 우수성을 주장했다. 이 주장이 옳지 않은 이유를 서술하세요.\n\n\n370/380\n\n0.9736842105263158\n\n\n\nCovid‑19 발병률을 사용하여,키트의 결과값이 양성으로 나온 사람이 실제로 코로나 바이러스에 걸려있을 확률을 구하세요.\n\n\n(0.01* (370/385)) / (0.01 * (370/385) + 0.99 * (10 / 700))\n\n0.4045926735921268\n\n\n0.40459\n\n\n카이제곱분포와 표본분산\n자유도가 𝑘인 카이제곱분포를 따르는 확률변수 𝑋 를 𝑋 ∼ (𝜒^2)*(𝑘)과 같이 나타내고, 이 확률변수의 확률밀도함수는 다음과 같습니다.\n다음의 물음에 답하세요. 1) 자유도가 4인 카이제곱분포의 확률밀도함수를 그려보세요.\n\nfrom scipy.stats import chi2\nimport matplotlib.pyplot as plt\nimport numpy as np\nk=np.linspace(-2, 40, 500)\ny=chi2.pdf(k, df=4)\nplt.plot(k, y, color= \"black\")\n\n\n\n\n\n\n\n\n\n다음의 확률을 구해보세요. 𝑃 (3 ≤ 𝑋 ≤ 5)\n\n\nchi2.cdf(5, 4) - chi2.cdf(3, 4)\n\nnp.float64(0.27052790518742903)\n\n\n\n자유도가 4인 카이제곱분포에서 크기가 1000인 표본을 뽑은 후, 히스토그램을 그려보세요.\n\n\nimport numpy as np\nnp.random.seed(2024)\n#chi2.rvs(df, loc=0, scale=1, size=1, random_state=None)\nx = chi2.rvs(4, loc=0, scale=1, size=1000)\nplt.hist(x, color = \"black\",histtype='bar')\nplt.figure()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n자유도가 4인 카이제곱분포를 따르는 확률변수에서 나올 수 있는 값 중 상위 5%에 해당하는 값은 얼마인지 계산해보세요.\n\n\nimport scipy.stats as stats\ndata =stats.chi2(4, loc=0, scale=1)\ndata.ppf(0.95) \n\nnp.float64(9.487729036781154)\n\n\ndata.ppf(0.95) = 9.487\n\n3번에서 뽑힌 표본값들 중 상위 5%에 위치한 표본의 값은 얼마인가요?\n\n\nnp.percentile(x, 95)\n\nnp.float64(10.006310615752485)\n\n\n10.006\n\n평균이 3, 표준편차가 2인 정규분포를 따르는 확률변수에서 크기가 20인 표본, 𝑥1, …, 𝑥20,을 뽑은 후 표본분산을 계산한 것을 𝑠1^2이라 생각해보죠. 다음을 수행해보세요!\n\n\nfrom scipy.stats import norm\n\nnp.random.seed(2024)\nx = norm.rvs(3, 2, size=20)\n\n• 같은 방법으로 500개의 𝑠^2 들, 𝑠(1)^2, 𝑠(2)^2, …, 𝑠(500)^2 발생시킵니다.\n\nsamples=[]\n\nfor i in range(500):\n    x = norm.rvs(3, 2, size=20)\n    samples.append(np.var(x, ddof=1))\n\n• 발생한 500개의 𝑠^2 들 각각에 4.75를 곱하고, 그것들의 히스토그램을 그려보세요. (히스토그램을 그릴 때 probability = TRUE 옵션을 사용해서 그릴 것)\n\nnew_samples = np.array(samples) * 4.75\nplt.hist(new_samples, density = True, color=\"black\")\nplt.figure()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n• 위에서 그린 히스토그램에 자유도가 19인 카이제곱분포 확률밀도함수를 겹쳐그려보세요.\n\nnew_samples = np.array(samples) * 4.75\nplt.hist(new_samples, density = True, color=\"black\")\nk=np.linspace(-2, 40, 500)\ny=chi2.pdf(k, df=19)\nplt.plot(k, y, color= \"red\")"
  },
  {
    "objectID": "posts/hw9/hw9.html",
    "href": "posts/hw9/hw9.html",
    "title": "hw9",
    "section": "",
    "text": "종속변수: 백혈병 세포 관측 불가 여부 (REMISS), 1이면 관측 안됨을 의미\n독립변수:\n골수의 세포성 (CELL) 골수편의 백혈구 비율 (SMEAR) 골수의 백혈병 세포 침투 비율 (INFIL) 골수 백혈병 세포의 라벨링 인덱스 (LI) 말초혈액의 백혈병 세포 수 (BLAST) 치료 시작 전 최고 체온 (TEMP)\n\n문제 1.\n\n\n데이터를 로드하고, 로지스틱 회귀모델을 적합하고, 회귀 표를 작성하세요.\n\nimport statsmodels.api as sm\nimport pandas as pd\n\ndata= pd.read_table('C:/Users/USER/Documents/LS빅데이터스쿨/LSbigdata-project1/data/leukemia_remission.txt', delimiter='\\t')\nprint(data.head())\n\n   REMISS  CELL  SMEAR  INFIL   LI  BLAST  TEMP\n0       1   0.8   0.83   0.66  1.9   1.10  1.00\n1       1   0.9   0.36   0.32  1.4   0.74  0.99\n2       0   0.8   0.88   0.70  0.8   0.18  0.98\n3       0   1.0   0.87   0.87  0.7   1.05  0.99\n4       1   0.9   0.75   0.68  1.3   0.52  0.98\n\n\n\n\n독립 변수와 종속 변수 설정\n예를 들어 ‘종속변수’는 ’remission’, 독립변수는 ‘feature1’, ‘feature2’ 등으로 설정\n\nX = data[['CELL', 'SMEAR', 'INFIL', 'LI', 'BLAST', 'TEMP']]  # 독립 변수\ny = data['REMISS']  # 종속 변수\n\n\n\n상수항 추가\n\nX = sm.add_constant(X)\n\n\n\n로지스틱 회귀 모델 적합\n\nmodel = sm.Logit(y, X)\nresult = model.fit()\n\nOptimization terminated successfully.\n         Current function value: 0.399886\n         Iterations 10\n\n\n\n\n회귀 표 출력\n\nprint(result.summary())\n\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                 REMISS   No. Observations:                   27\nModel:                          Logit   Df Residuals:                       20\nMethod:                           MLE   Df Model:                            6\nDate:                Tue, 10 Sep 2024   Pseudo R-squ.:                  0.3718\nTime:                        10:32:46   Log-Likelihood:                -10.797\nconverged:                       True   LL-Null:                       -17.186\nCovariance Type:            nonrobust   LLR p-value:                   0.04670\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst         64.2581     74.965      0.857      0.391     -82.670     211.187\nCELL          30.8301     52.135      0.591      0.554     -71.353     133.013\nSMEAR         24.6863     61.526      0.401      0.688     -95.903     145.275\nINFIL        -24.9745     65.281     -0.383      0.702    -152.923     102.974\nLI             4.3605      2.658      1.641      0.101      -0.849       9.570\nBLAST         -0.0115      2.266     -0.005      0.996      -4.453       4.430\nTEMP        -100.1734     77.753     -1.288      0.198    -252.567      52.220\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.11 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\n\n\n\n\n문제 2.\n\n\n해당 모델은 통계적으로 유의한가요? 그 이유를 검정통계량를 사용해서 설명하시오.\n\nfrom scipy.stats import norm\n\nstat_value=-2*(-17.186 - (-10.797))\n\nfrom scipy.stats import chi2\n\n1-chi2.cdf(stat_value, df=6) \n\nnp.float64(0.04669995098322843)\n\n\n0.04669995098322843\np-value는 0.05보다 작으므로, 귀무가설을 기각할 수 있다. 즉, 이 회귀모델은 전체적으로 통계적으로 유의하다고 할 수 있다.\n\n\n문제3. 유의수준 0.2를 기준으로 통계적으로 유의한 변수\n\n\n통계적으로 유의한 변수는 몇개이며, 어느 변수 인가요?\n통계적으로 유의미한 변수는 2개 이며 , LI와 TEMP이다.\n\n\n문제 4. 다음 환자에 대한 오즈는 얼마인가요?\nCELL (골수의 세포성): 65% SMEAR (골수편의 백혈구 비율): 45% INFIL (골수의 백혈병 세포 침투 비율): 55% LI (골수 백혈병 세포의 라벨링 인덱스): 1.2 BLAST (말초혈액의 백혈병 세포 수): 1.1세포/μL TEMP (치료 시작 전 최고 체온): 0.9\n\nimport numpy as np\n\n# 주어진 회귀 계수\nintercept = 64.2581\ncoef_cell = 30.8301\ncoef_smear = 24.6863\ncoef_infil = -24.9745\ncoef_li = 4.3605\ncoef_blast = -0.0115\ncoef_temp = -100.1734\n\n# 주어진 환자 데이터\ncell = 0.65\nsmear = 0.45\ninfil = 0.55\nli = 1.2\nblast = 1.1\ntemp = 0.9\n\n# 선형 결합 계산\nlog_odds = (intercept +\n            coef_cell * cell +\n            coef_smear * smear +\n            coef_infil * infil +\n            coef_li * li +\n            coef_blast * blast +\n            coef_temp * temp)\n\n# 오즈 계산\nodds = np.exp(log_odds)\nodds\n\nnp.float64(0.03817459641135519)\n\n\n\n\n0.038\n\n\n문제 5. 위 환자의 혈액에서 백혈병 세포가 관측되지 않은 확률은 얼마인가요?\n\n# 확률 계산\nprobability = odds / (1 + odds)\nprobability\n\nnp.float64(0.03677088280074742)\n\n\n\n\n0.0367\n\n\n문제 6. TEMP 변수의 계수는 얼마이며, 해당 계수를 사용해서 TEMP 변수가 백혈병 치료에 대한 영향을 설명하시오.\nTEMP 변수의 계수는 -100.1734이다. 이 값은 TEMP(체온)가 증가할수록 백혈병이 완치될 확률이 크게 감소한다는 것을 의미합니다. 체온이 낮을수록 백혈병 치료에 긍정적인 영향을 미친다고 해석할 수 있습니다.\n\n#오즈값구하기 0.0381748712694388\nmy_odds = np.exp(64.2581 +30.8301*0.65 + 24.686316*0.45 -24.9745*0.55 +4.3605*1.2 -0.0115*1.1 -100.1734*1)\nmy_odds\n\n0.0381 #temp 0.9\n1.703  #temp 1\n\n1.703\n\n\n\n\n문제 7. CELL 변수의 99% 오즈비에 대한 신뢰구간을 구하시오.\n\nfrom scipy.stats import norm\n\n# CELL 변수의 계수와 표준 오차\ncoef = coef_cell = 30.8301\nstd_err = 52.135\n\n# 99% 신뢰구간 계산\nz_value = norm.ppf(0.995)  # 99%에 해당하는 z-value\nlower_bound = np.exp(coef - z_value * std_err)\nupper_bound = np.exp(coef + z_value * std_err)\nlower_bound, upper_bound\nlower_bound = 1.16832\nupper_bound = 5.14188\n\n\n\n문제 8. 주어진 데이터에 대하여 로지스틱 회귀 모델의 예측 확률을 구한 후, 50% 이상인 경우 1로 처리하여, 혼동 행렬를 구하시오.\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\n\n# 데이터 로드\n # 탭으로 구분된 파일\nX = data.drop(columns=['REMISS'])\ny = data['REMISS']\n\n# 데이터 분할\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 로지스틱 회귀 모델 생성 및 학습\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# 예측 확률 계산\npred_probs = model.predict_proba(X_test)[:, 1]\npredictions = [1 if prob &gt;= 0.5 else 0 for prob in pred_probs]\n\n# 혼동 행렬 생성\nconf_matrix = confusion_matrix(y_test, predictions)\nprint(conf_matrix)\n\n[[5 0]\n [0 1]]\n\n\n\n\n문제 9. 해당 모델의 Accuracy는 얼마인가요?\n\nfrom sklearn.metrics import accuracy_score, f1_score\n\n# 예측 결과\ny_pred = predictions  # 이전의 예측 결과\ny_true = y_test  # 실제 결과\n\n# Accuracy 계산\naccuracy = accuracy_score(y_true, y_pred)\n# accuracy = 1.0\n\n\n\n문제 10. 해당 모델의 F1 Score를 구하세요\n\n# F1 Score 계산\nf1 = f1_score(y_true, y_pred)\n# f1 = 1.0\nprint(f'Accuracy: {accuracy:.2f}')\nprint(f'F1 Score: {f1:.2f}')\n\nAccuracy: 1.00\nF1 Score: 1.00"
  }
]