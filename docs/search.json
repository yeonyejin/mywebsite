[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "testwebsite",
    "section": "",
    "text": "안녕하세요\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "index.html#홈페이지-첫-화면-입니다",
    "href": "index.html#홈페이지-첫-화면-입니다",
    "title": "testwebsite",
    "section": "",
    "text": "안녕하세요\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"col1\": [1, 2, 3]\n})"
  },
  {
    "objectID": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"col1\": [1, 2, 3]\n})"
  },
  {
    "objectID": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요.",
    "href": "hw1.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요.",
    "title": "hw1",
    "section": "다음 표의 내용을 데이터 프레임으로 만들어 출력해보세요.",
    "text": "다음 표의 내용을 데이터 프레임으로 만들어 출력해보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\n\n\n\n\n\n\n\nproduct\nprice\nvolume\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n##앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\ndf_mean =sum(df[\"price\"]) / 3\n\ndf_mean \n\n2100.0\n\n\n과일 가격의 평균은 2100 원이다.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\n\ndf_mean_v = sum(df[\"volume\"]) /3\n\ndf_mean_v\n\n25.0\n\n\n과일의 판매량 평균은 25이다."
  },
  {
    "objectID": "hw1.html#p115-mpg데이터를-이용해-분석문제-해결하기",
    "href": "hw1.html#p115-mpg데이터를-이용해-분석문제-해결하기",
    "title": "hw1",
    "section": "p115 mpg데이터를 이용해 분석문제 해결하기",
    "text": "p115 mpg데이터를 이용해 분석문제 해결하기\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\nQ2, 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\ndf_new = df_new.rename(columns = {'cty' : 'city'})\ndf_new = df_new.rename(columns = {'hwy' : 'highway'})\ndf_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\ndf_new = df_new.rename(columns = {'cty' : 'city'})\ndf_new = df_new.rename(columns = {'hwy' : 'highway'})\ndf_new\n\ndf_new[['city','highway']]\n\n\n\n\n\n\n\n\ncity\nhighway\n\n\n\n\n0\n18\n29\n\n\n1\n21\n29\n\n\n2\n20\n31\n\n\n3\n21\n30\n\n\n4\n16\n26\n\n\n...\n...\n...\n\n\n229\n19\n28\n\n\n230\n21\n29\n\n\n231\n16\n26\n\n\n232\n18\n26\n\n\n233\n17\n26\n\n\n\n\n234 rows × 2 columns\n\n\n\n##p130 midwest.csv는 미국 동북중부(East North Central States) 437개 지역의 인구 통계 정보를 담고 있습니다. midwest.csv를 이용해 데이터 분석문제를 해결해 보세요.\nQ1. midwesst.csv를 불러와 데이터의 특징을 파악하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\n\ndf.shape\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\n\ndf_new[['total','asian']]\n\n\n\n\n\n\n\n\ntotal\nasian\n\n\n\n\n0\n66090\n249\n\n\n1\n10626\n48\n\n\n2\n14991\n16\n\n\n3\n30806\n150\n\n\n4\n5836\n5\n\n\n...\n...\n...\n\n\n432\n304715\n2699\n\n\n433\n46104\n92\n\n\n434\n19385\n43\n\n\n435\n140320\n1728\n\n\n436\n73605\n722\n\n\n\n\n437 rows × 2 columns\n\n\n\nQ3. total, asian변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\n\ndf_new['per'] =(df_new['asian']/df_new['total'])* 100\ndf_new\n\ndf_new['per'].plot.hist()\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\ndf_new['per'] =(df_new['asian']/df_new['total'])*100\ndf_new\ndf_new['per'].mean() \n\n\ndf_new['size'] = np.where(df_new['per'] &gt; 0.4872, 'large', 'small' )\ndf_new['size']\n\n0      small\n1      small\n2      small\n3      small\n4      small\n       ...  \n432    large\n433    small\n434    small\n435    large\n436    large\nName: size, Length: 437, dtype: object\n\n\nQ5. ’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\ndf_new['per'] =(df_new['asian']/df_new['total'])*100\ndf_new\ndf_new['per'].mean() \n\n\ndf_new['size'] = np.where(df_new['per'] &gt; 0.4872, 'large', 'small' )\ndf_new['size']\n\ncount_test = df_new['size'].value_counts()\ncount_test.plot.bar(rot = 0)"
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf4 = df.query('displ&lt;= 4')\ndf5 = df.query('displ&gt;= 5')\n\ndf4['hwy'].mean()\ndf5['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n배기량이 4이하인 자동차의 hwy평균이 더 높다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)의 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_audi = df.query('manufacturer == \"audi\"')\ndf_toyota = df.query('manufacturer == \"toyota\"')\n\n\ndf_audi['cty'].mean()\ndf_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\ntoyoya의 cty 평균이 더 높은 것을 알 수 있다.\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_new = df.query('manufacturer in[\"chevrolet\", \"ford\", \"honda\"]')\n\ndf_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "hw2.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf4 = df.query('displ&lt;= 4')\ndf5 = df.query('displ&gt;= 5')\n\ndf4['hwy'].mean()\ndf5['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n배기량이 4이하인 자동차의 hwy평균이 더 높다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)의 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_audi = df.query('manufacturer == \"audi\"')\ndf_toyota = df.query('manufacturer == \"toyota\"')\n\n\ndf_audi['cty'].mean()\ndf_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\ntoyoya의 cty 평균이 더 높은 것을 알 수 있다.\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_new = df.query('manufacturer in[\"chevrolet\", \"ford\", \"honda\"]')\n\ndf_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#p153-mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "hw2.html#p153-mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "hw2",
    "section": "p153 mpg 데이터를 이용해 분석 문제를 해결해 보세요.",
    "text": "p153 mpg 데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. ’audi’에서 생산한 자동차 중 어떤 자동차 모델위 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf.query('manufacturer == \"audi\"')\\\n  .sort_values('hwy', ascending = False)\\\n  .head(5)\n\n\n\n#df_audi = df.query('manufacturer == \"audi\"')\n#df_audi.sort_values('hwy', ascending = False).head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "hw2.html#p158-mpg데이터를-이용해-분석문제를-해결해-보세요.",
    "href": "hw2.html#p158-mpg데이터를-이용해-분석문제를-해결해-보세요.",
    "title": "hw2",
    "section": "p158 mpg데이터를 이용해 분석문제를 해결해 보세요.",
    "text": "p158 mpg데이터를 이용해 분석문제를 해결해 보세요.\nmpg데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니다. 두 변수를 각각 활용하는 대신 하나의 합산 연비 변수를 만들어 분석하려고 합니다.\nQ1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg.assign( total = mpg['cty'] + mpg['hwy'])\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg.assign( total = mpg['cty'] + mpg['hwy'],\n            mean = (mpg['cty'] + mpg['hwy'])/2)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg = mpg.assign(\n        total = mpg['cty'] + mpg['hwy'],\n        mean = (mpg['cty'] + mpg['hwy'])/2)\n\nmean = (mpg['cty'] + mpg['hwy'])/2\nmpg.sort_values('mean', ascending = False)\\\n.head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg원본을 이용하세요.\n\nimport pandas as pd\n\nmpg = pd.read_csv('mpg.csv')\nmpg = mpg.assign(\n            total = lambda x:  x['cty'] + x['hwy'],\n            mean = lambda x : x['total']/2) \\\n         .sort_values('mean', ascending = False )\\\n         .head(3)\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "빅데이터 스쿨 Homework2",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf4 = df.query('displ&lt;= 4')\ndf5 = df.query('displ&gt;= 5')\n\ndf4['hwy'].mean()\ndf5['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n배기량이 4이하인 자동차의 hwy평균이 더 높다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)의 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_audi = df.query('manufacturer == \"audi\"')\ndf_toyota = df.query('manufacturer == \"toyota\"')\n\n\ndf_audi['cty'].mean()\ndf_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\ntoyoya의 cty 평균이 더 높은 것을 알 수 있다.\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_new = df.query('manufacturer in[\"chevrolet\", \"ford\", \"honda\"]')\n\ndf_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw2/index.html#mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework2",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf4 = df.query('displ&lt;= 4')\ndf5 = df.query('displ&gt;= 5')\n\ndf4['hwy'].mean()\ndf5['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n배기량이 4이하인 자동차의 hwy평균이 더 높다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)의 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_audi = df.query('manufacturer == \"audi\"')\ndf_toyota = df.query('manufacturer == \"toyota\"')\n\n\ndf_audi['cty'].mean()\ndf_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\ntoyoya의 cty 평균이 더 높은 것을 알 수 있다.\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf_new = df.query('manufacturer in[\"chevrolet\", \"ford\", \"honda\"]')\n\ndf_new['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#p153-mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw2/index.html#p153-mpg-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework2",
    "section": "p153 mpg 데이터를 이용해 분석 문제를 해결해 보세요.",
    "text": "p153 mpg 데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. ’audi’에서 생산한 자동차 중 어떤 자동차 모델위 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\ndf\n\ndf.query('manufacturer == \"audi\"')\\\n  .sort_values('hwy', ascending = False)\\\n  .head(5)\n\n\n\n#df_audi = df.query('manufacturer == \"audi\"')\n#df_audi.sort_values('hwy', ascending = False).head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#p158-mpg데이터를-이용해-분석문제를-해결해-보세요.",
    "href": "posts/hw2/index.html#p158-mpg데이터를-이용해-분석문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework2",
    "section": "p158 mpg데이터를 이용해 분석문제를 해결해 보세요.",
    "text": "p158 mpg데이터를 이용해 분석문제를 해결해 보세요.\nmpg데이터는 연비를 나타내는 변수가 hwy(고속도로 연비), cty(도시 연비) 두 종류로 분리되어 있습니다. 두 변수를 각각 활용하는 대신 하나의 합산 연비 변수를 만들어 분석하려고 합니다.\nQ1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg.assign( total = mpg['cty'] + mpg['hwy'])\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg.assign( total = mpg['cty'] + mpg['hwy'],\n            mean = (mpg['cty'] + mpg['hwy'])/2)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\nmpg = df.copy()\n\nmpg = mpg.assign(\n        total = mpg['cty'] + mpg['hwy'],\n        mean = (mpg['cty'] + mpg['hwy'])/2)\n\nmean = (mpg['cty'] + mpg['hwy'])/2\nmpg.sort_values('mean', ascending = False)\\\n.head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg원본을 이용하세요.\n\nimport pandas as pd\n\nmpg = pd.read_csv('mpg.csv')\nmpg = mpg.assign(\n            total = lambda x:  x['cty'] + x['hwy'],\n            mean = lambda x : x['total']/2) \\\n         .sort_values('mean', ascending = False )\\\n         .head(3)\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "글 목록",
    "section": "",
    "text": "빅데이터 스쿨 Homework1\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\n빅데이터 스쿨 Homework2\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\n빅데이터 스쿨 Homework3\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\n연예진\n\n\n\n\n\n\n\n\n\n\n\n\nhw4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "빅데이터 스쿨 Homework1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"col1\": [1, 2, 3]\n})"
  },
  {
    "objectID": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "빅데이터 스쿨 Homework1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"col1\": [1, 2, 3]\n})"
  },
  {
    "objectID": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요.",
    "href": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해보세요.",
    "title": "빅데이터 스쿨 Homework1",
    "section": "다음 표의 내용을 데이터 프레임으로 만들어 출력해보세요.",
    "text": "다음 표의 내용을 데이터 프레임으로 만들어 출력해보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\n\n\n\n\n\n\n\nproduct\nprice\nvolume\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n##앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\ndf_mean =sum(df[\"price\"]) / 3\n\ndf_mean \n\n2100.0\n\n\n과일 가격의 평균은 2100 원이다.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"product\" : [\"사과\", \"딸기\", \"수박\"],\n    \"price\"   : [1800, 1500, 3000],\n    \"volume\"  : [24, 38, 13]\n})\ndf\n\n\ndf_mean_v = sum(df[\"volume\"]) /3\n\ndf_mean_v\n\n25.0\n\n\n과일의 판매량 평균은 25이다."
  },
  {
    "objectID": "posts/hw1/index.html#p115-mpg데이터를-이용해-분석문제-해결하기",
    "href": "posts/hw1/index.html#p115-mpg데이터를-이용해-분석문제-해결하기",
    "title": "빅데이터 스쿨 Homework1",
    "section": "p115 mpg데이터를 이용해 분석문제 해결하기",
    "text": "p115 mpg데이터를 이용해 분석문제 해결하기\nQ1. mpg데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\nQ2, 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\ndf_new = df_new.rename(columns = {'cty' : 'city'})\ndf_new = df_new.rename(columns = {'hwy' : 'highway'})\ndf_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_new = df.copy()\ndf_new\n\ndf_new = df_new.rename(columns = {'cty' : 'city'})\ndf_new = df_new.rename(columns = {'hwy' : 'highway'})\ndf_new\n\ndf_new[['city','highway']]\n\n\n\n\n\n\n\n\ncity\nhighway\n\n\n\n\n0\n18\n29\n\n\n1\n21\n29\n\n\n2\n20\n31\n\n\n3\n21\n30\n\n\n4\n16\n26\n\n\n...\n...\n...\n\n\n229\n19\n28\n\n\n230\n21\n29\n\n\n231\n16\n26\n\n\n232\n18\n26\n\n\n233\n17\n26\n\n\n\n\n234 rows × 2 columns\n\n\n\n##p130 midwest.csv는 미국 동북중부(East North Central States) 437개 지역의 인구 통계 정보를 담고 있습니다. midwest.csv를 이용해 데이터 분석문제를 해결해 보세요.\nQ1. midwesst.csv를 불러와 데이터의 특징을 파악하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\n\ndf.shape\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\n\ndf_new[['total','asian']]\n\n\n\n\n\n\n\n\ntotal\nasian\n\n\n\n\n0\n66090\n249\n\n\n1\n10626\n48\n\n\n2\n14991\n16\n\n\n3\n30806\n150\n\n\n4\n5836\n5\n\n\n...\n...\n...\n\n\n432\n304715\n2699\n\n\n433\n46104\n92\n\n\n434\n19385\n43\n\n\n435\n140320\n1728\n\n\n436\n73605\n722\n\n\n\n\n437 rows × 2 columns\n\n\n\nQ3. total, asian변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요\n\nimport pandas as pd\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\n\ndf_new['per'] =(df_new['asian']/df_new['total'])* 100\ndf_new\n\ndf_new['per'].plot.hist()\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\ndf_new['per'] =(df_new['asian']/df_new['total'])*100\ndf_new\ndf_new['per'].mean() \n\n\ndf_new['size'] = np.where(df_new['per'] &gt; 0.4872, 'large', 'small' )\ndf_new['size']\n\n0      small\n1      small\n2      small\n3      small\n4      small\n       ...  \n432    large\n433    small\n434    small\n435    large\n436    large\nName: size, Length: 437, dtype: object\n\n\nQ5. ’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해보세요.\n\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.read_csv('midwest.csv')\ndf\n\ndf_new = df.copy()\ndf_new = df_new.rename(columns = { 'poptotal':'total'}) \ndf_new = df_new.rename(columns = { 'popasian':'asian'}) \ndf_new\ndf_new['per'] =(df_new['asian']/df_new['total'])*100\ndf_new\ndf_new['per'].mean() \n\n\ndf_new['size'] = np.where(df_new['per'] &gt; 0.4872, 'large', 'small' )\ndf_new['size']\n\ncount_test = df_new['size'].value_counts()\ncount_test.plot.bar(rot = 0)"
  },
  {
    "objectID": "mpg.html",
    "href": "mpg.html",
    "title": "교과서 챕터8",
    "section": "",
    "text": "##빈도 막대 그래프 그리기\n데이터 불러오기\nimport pandas as pd\n\nmpg= pd.read_csv(\"mpg.csv\")\nmpg.shape\n\n(234, 11)\nSeaborn 패키지 불러오기\nimport seaborn as sns\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/hw3/index3.html",
    "href": "posts/hw3/index3.html",
    "title": "빅데이터 스쿨 Homework3",
    "section": "",
    "text": "Q1. mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비)간에 어떤 관계가 있는지 알아보려고 합니다 x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nmpg=pd.read_csv('mpg.csv')\n\nimport seaborn as sns\nsns.scatterplot(data=mpg, x='cty', y='hwy')\n\n\n\n\n\n\n\n\nQ2. 미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nimport pandas as pd\nmidwest=pd.read_csv('midwest.csv')\n\nimport seaborn as sns\nsns.scatterplot(data=midwest, x = 'poptotal', y = 'popasian')\\\n   .set(xlim = [0,500000], ylim = [0, 10000])"
  },
  {
    "objectID": "posts/hw3/index3.html#p204-mpg-데이터와-midwest-데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw3/index3.html#p204-mpg-데이터와-midwest-데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework3",
    "section": "",
    "text": "Q1. mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비)간에 어떤 관계가 있는지 알아보려고 합니다 x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nmpg=pd.read_csv('mpg.csv')\n\nimport seaborn as sns\nsns.scatterplot(data=mpg, x='cty', y='hwy')\n\n\n\n\n\n\n\n\nQ2. 미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nimport pandas as pd\nmidwest=pd.read_csv('midwest.csv')\n\nimport seaborn as sns\nsns.scatterplot(data=midwest, x = 'poptotal', y = 'popasian')\\\n   .set(xlim = [0,500000], ylim = [0, 10000])"
  },
  {
    "objectID": "posts/hw3/index3.html#p211-mpg데이터를-이용해-분석-문제를-해결해-보세요.",
    "href": "posts/hw3/index3.html#p211-mpg데이터를-이용해-분석-문제를-해결해-보세요.",
    "title": "빅데이터 스쿨 Homework3",
    "section": "p211 mpg데이터를 이용해 분석 문제를 해결해 보세요.",
    "text": "p211 mpg데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. 어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시 연비)평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nimport pandas as pd\nmpg = pd.read_csv('mpg.csv')\n\ndf_mpg = mpg.query('category==\"suv\"')\\\n           .groupby('manufacturer', as_index=False)\\\n           .agg(cty_mean=('cty', 'mean'))\\\n           .sort_values('cty_mean', ascending=False)\\\n           .head()\ndf_mpg\n\nimport seaborn as sns\nsns.barplot(data=df_mpg, x = 'manufacturer', y='cty_mean')\n\n\n\n\n\n\n\n\nQ2. 자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\ndf1_mpg = mpg.groupby('category', as_index = False)\\\n             .agg(n = ('category', 'count'))\\\n             .sort_values('n', ascending = False)\ndf1_mpg\n\nsns.barplot(data = df1_mpg, x = 'category', y = 'n')"
  },
  {
    "objectID": "mpg.html#선-그래프-만들기",
    "href": "mpg.html#선-그래프-만들기",
    "title": "교과서 챕터8",
    "section": "선 그래프 만들기",
    "text": "선 그래프 만들기\neconomics 불러오고 선 그래프 만들기기\n\neconomics = pd.read_csv('economics.csv')\neconomics\nimport plotly.express as px\npx.line(data_frame = economics, x = 'date', y= 'psavert')"
  },
  {
    "objectID": "finala-group.html",
    "href": "finala-group.html",
    "title": "project1 - 기역조",
    "section": "",
    "text": "대한민국 연령별, 지역별 출생율 비교분석"
  },
  {
    "objectID": "finala-group.html#q-8년동안-청년층과-비청년층-사이에-출산율이-어떻게-변했을까",
    "href": "finala-group.html#q-8년동안-청년층과-비청년층-사이에-출산율이-어떻게-변했을까",
    "title": "project1 - 기역조",
    "section": "Q 8년동안 청년층과 비청년층 사이에 출산율이 어떻게 변했을까?",
    "text": "Q 8년동안 청년층과 비청년층 사이에 출산율이 어떻게 변했을까?\n20-22년도 데이터 추출\n\n전국 모의연령별 출산율 비교를 위한 iloc 활용\n기간: 2020~2022\n그룹: 청년 / 비청년\n\n\nbr2 = br.iloc[[0]]\ntype(br2[\"21_2024\"][0])\nbr2 = br2.iloc[:, 57:78] \nbr2\n\n\n\n\n\n\n\n\n20_1519\n20_2024\n20_2529\n20_3034\n20_3539\n20_4044\n20_4549\n21_1519\n21_2024\n21_2529\n...\n21_3539\n21_4044\n21_4549\n22_1519\n22_2024\n22_2529\n22_3034\n22_3539\n22_4044\n22_4549\n\n\n\n\n0\n0.7\n6.2\n30.6\n78.9\n42.3\n7.1\n0.2\n0.4\n5.0\n27.5\n...\n43.5\n7.6\n0.2\n0.4\n4.1\n24.0\n73.5\n44.1\n8.0\n0.2\n\n\n\n\n1 rows × 21 columns\n\n\n\n보기 쉽게 만들기 위해 행렬을 뒤집는 transpose 함수 사용\n\nbr2 = br2.transpose()\nbr2\n\n\n\n\n\n\n\n\n0\n\n\n\n\n20_1519\n0.7\n\n\n20_2024\n6.2\n\n\n20_2529\n30.6\n\n\n20_3034\n78.9\n\n\n20_3539\n42.3\n\n\n20_4044\n7.1\n\n\n20_4549\n0.2\n\n\n21_1519\n0.4\n\n\n21_2024\n5.0\n\n\n21_2529\n27.5\n\n\n21_3034\n76.1\n\n\n21_3539\n43.5\n\n\n21_4044\n7.6\n\n\n21_4549\n0.2\n\n\n22_1519\n0.4\n\n\n22_2024\n4.1\n\n\n22_2529\n24.0\n\n\n22_3034\n73.5\n\n\n22_3539\n44.1\n\n\n22_4044\n8.0\n\n\n22_4549\n0.2\n\n\n\n\n\n\n\n새로운 변수명 설정\n\n0 -&gt; birth_rate(모의연령별 출산율)\n비어있는열 -&gt; year\n\n\nbr2 = br2.rename(columns = {0 : 'birth_rate'})\nbr2 = br2.rename_axis(columns = {'' : 'year'}, index = None)\nbr2 = br2.reset_index().rename(columns={'index': 'year'})\nbr2\n\n\n\n\n\n\n\n\nyear\nbirth_rate\n\n\n\n\n0\n20_1519\n0.7\n\n\n1\n20_2024\n6.2\n\n\n2\n20_2529\n30.6\n\n\n3\n20_3034\n78.9\n\n\n4\n20_3539\n42.3\n\n\n5\n20_4044\n7.1\n\n\n6\n20_4549\n0.2\n\n\n7\n21_1519\n0.4\n\n\n8\n21_2024\n5.0\n\n\n9\n21_2529\n27.5\n\n\n10\n21_3034\n76.1\n\n\n11\n21_3539\n43.5\n\n\n12\n21_4044\n7.6\n\n\n13\n21_4549\n0.2\n\n\n14\n22_1519\n0.4\n\n\n15\n22_2024\n4.1\n\n\n16\n22_2529\n24.0\n\n\n17\n22_3034\n73.5\n\n\n18\n22_3539\n44.1\n\n\n19\n22_4044\n8.0\n\n\n20\n22_4549\n0.2\n\n\n\n\n\n\n\nnp.where함수로 청년층과 비청년층 구분\n\n청년층: 1, 비청년층: 2 할당\n\n\nbr2['number'] = np.where(br2['year']\\\n                  .isin(['20_2024', '20_2529', '20_3034', '21_2024', '21_2529', '21_3034', '22_2024', '22_2529', '22_3034']), 1, 2)\nbr2\n\n\n\n\n\n\n\n\nyear\nbirth_rate\nnumber\n\n\n\n\n0\n20_1519\n0.7\n2\n\n\n1\n20_2024\n6.2\n1\n\n\n2\n20_2529\n30.6\n1\n\n\n3\n20_3034\n78.9\n1\n\n\n4\n20_3539\n42.3\n2\n\n\n5\n20_4044\n7.1\n2\n\n\n6\n20_4549\n0.2\n2\n\n\n7\n21_1519\n0.4\n2\n\n\n8\n21_2024\n5.0\n1\n\n\n9\n21_2529\n27.5\n1\n\n\n10\n21_3034\n76.1\n1\n\n\n11\n21_3539\n43.5\n2\n\n\n12\n21_4044\n7.6\n2\n\n\n13\n21_4549\n0.2\n2\n\n\n14\n22_1519\n0.4\n2\n\n\n15\n22_2024\n4.1\n1\n\n\n16\n22_2529\n24.0\n1\n\n\n17\n22_3034\n73.5\n1\n\n\n18\n22_3539\n44.1\n2\n\n\n19\n22_4044\n8.0\n2\n\n\n20\n22_4549\n0.2\n2\n\n\n\n\n\n\n\n\n청년, 비청년 출산율비교\n20~22년 청년 비청년 모의 출산율\n청년층의 출산율을 알아보기 위해서는 br2 데이터에서 number == 1를 추출하여 평균을 구함 비청년도 같은 방식으로 진행\n\nbr2_youth_rate = br2.query('number == 1')['birth_rate'].mean()\nbr2_non_youth_rate = br2.query('number == 2')['birth_rate'].mean()\n\nprint('청년: ', br2_youth_rate)\nprint('비청년: ', br2_non_youth_rate)\n\n청년:  36.21111111111111\n비청년:  12.891666666666666\n\n\n12~14년 청년 비청년 모의 출산율\n\nbr3= br.iloc[:, 1:21] ## 12-14년도 데이터 추출\nbr3 = br3.iloc[[0]]\n\nbr3 = br3.transpose()\n\nbr3 = br3.rename(columns = {0 : 'birth_rate'})\nbr3 = br3.rename_axis(columns = {'' : 'year'}, index = None)\nbr3 = br3.reset_index().rename(columns={'index': 'year'})\n\nbr3['number'] = np.where(br3['year']\\\n                  .isin(['12_2024', '12_2529', '12_3034', '13_2024', '13_2529', '13_3034', '14_2024', '14_2529', '14_3034']), 1, 2)\n\n\nbr3_youth_rate = br3.query('number == 1')['birth_rate'].mean()\nbr3_non_youth_rate = br3.query('number == 2')['birth_rate'].mean()\n\nprint('청년: ', br3_youth_rate)\nprint('비청년: ', br3_non_youth_rate)\n\n청년:  66.32222222222222\n비청년:  12.909090909090908\n\n\n그래프 표현\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndata = pd.DataFrame({\n    'Age Group': ['12_14Youth', '20_22Youth', '12_14Non-Youth', '20_22Non-Youth'],\n    'Mean Birth Rate': [br3_youth_rate, br2_youth_rate, br3_non_youth_rate, br2_non_youth_rate],\n    'Youth': ['Youth', 'Youth', 'Non-Youth', 'Non-Youth']\n})\n\nsns.barplot(x='Age Group', y='Mean Birth Rate', hue='Youth', data=data)\nplt.xlabel('Age Group', fontsize=12)\nplt.ylabel('Mean Birth Rate', fontsize=12)\nplt.title('12-14/20-22 Mean Birth Rate Comparison', fontsize=15)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "finala-group.html#결과",
    "href": "finala-group.html#결과",
    "title": "project1 - 기역조",
    "section": "결과",
    "text": "결과\n- 과거대비 청년층의 출산율 감소\n- 비청년층 출산율 변화 없음"
  },
  {
    "objectID": "finala-group.html#q-전국-평균-대비-시도별-청년층의-출산율-비교",
    "href": "finala-group.html#q-전국-평균-대비-시도별-청년층의-출산율-비교",
    "title": "project1 - 기역조",
    "section": "Q 전국 평균 대비 시도별 청년층의 출산율 비교",
    "text": "Q 전국 평균 대비 시도별 청년층의 출산율 비교\n청년층의 출산율이 높은 지역 상위5 & 하위5\n\nprint('상위' + '\\n')\nprint(br[['시군구별', \"mean20\"]].sort_values(\"mean20\", ascending = False).head(), \"\\n\", \"-------------------------\")\nprint(br[['시군구별', \"mean21\"]].sort_values(\"mean21\", ascending = False).head(), \"\\n\", \"-------------------------\")\nprint(br[['시군구별', \"mean22\"]].sort_values(\"mean22\", ascending = False).head(), \"\\n\", \"--------------------------\")\n\nprint('하위' + '\\n')\nprint(br[['시군구별', \"mean20\"]].sort_values(\"mean20\").head(), \"\\n\", \"--------------------------\")\nprint(br[['시군구별', \"mean21\"]].sort_values(\"mean21\").head(), \"\\n\", \"--------------------------\")\nprint(br[['시군구별', \"mean22\"]].sort_values(\"mean22\").head())\n\n상위\n\n       시군구별     mean20\n8   세종특별자치시  64.233333\n14     전라남도  56.266667\n12     충청남도  52.100000\n10      강원도  51.300000\n7     울산광역시  49.700000 \n -------------------------\n       시군구별     mean21\n8   세종특별자치시  63.000000\n14     전라남도  49.333333\n10      강원도  47.566667\n12     충청남도  47.533333\n15     경상북도  46.733333 \n -------------------------\n       시군구별     mean22\n8   세종특별자치시  53.066667\n10      강원도  46.033333\n14     전라남도  45.600000\n15     경상북도  44.500000\n12     충청남도  44.400000 \n --------------------------\n하위\n\n    시군구별     mean20\n1  서울특별시  25.700000\n2  부산광역시  33.933333\n5  광주광역시  37.233333\n6  대전광역시  37.366667\n4  인천광역시  38.033333 \n --------------------------\n    시군구별     mean21\n1  서울특별시  23.833333\n2  부산광역시  31.633333\n4  인천광역시  34.600000\n3  대구광역시  35.466667\n0     전국  36.200000 \n --------------------------\n    시군구별     mean22\n1  서울특별시  21.600000\n2  부산광역시  30.900000\n4  인천광역시  32.233333\n0     전국  33.866667\n3  대구광역시  34.100000\n\n\n각 도시 청년층의 평균모의출산율 그래프\n\nimport seaborn as sns\nplt.rcParams.update({'font.family' : 'Malgun Gothic'})\nnew = br[['시군구별', 'mean20']].sort_values(\"mean20\", ascending=False)\nplt.figure(figsize=(7, 3))\nsns.barplot(data=new, x='시군구별', y='mean20')\nplt.xticks(rotation=45)  \nplt.xlabel('시군구별', fontsize=12)\nplt.ylabel('Mean Birth Rate 2020', fontsize=12)\nplt.title('Mean Birth Rate  2020년도 시군구별 ', fontsize=15)\nplt.show()\n\n\n\n\n\n\n\n\n\nnew = br[['시군구별', 'mean21']].sort_values(\"mean21\", ascending=False)\nplt.figure(figsize=(7, 3))\nsns.barplot(data=new, x='시군구별', y='mean21')\nplt.xticks(rotation=45)  \nplt.xlabel('시군구별', fontsize=12)\nplt.ylabel('Mean Birth Rate 2021', fontsize=12)\nplt.title('Mean Birth Rate  2021년도 시군구별 ', fontsize=15)\nplt.show()\n\n\n\n\n\n\n\n\n\nnew = br[['시군구별', 'mean22']].sort_values(\"mean22\", ascending=False)\nplt.figure(figsize=(7, 3))\nsns.barplot(data=new, x='시군구별', y='mean22')\nplt.xticks(rotation=45)  \nplt.xlabel('시군구별', fontsize=12)\nplt.ylabel('Mean Birth Rate 2022', fontsize=12)\nplt.title('Mean Birth Rate  2022년도 시군구별 ', fontsize=15)\nplt.show()"
  },
  {
    "objectID": "finala-group.html#결과-1",
    "href": "finala-group.html#결과-1",
    "title": "project1 - 기역조",
    "section": "결과",
    "text": "결과\n\n가장 높은 출산율을 보여주는 도시 = 세종특별자치시\n가장 낮은 출산율을 보여주는 도시 = 서울특별시"
  },
  {
    "objectID": "posts/hw4/hw4.html",
    "href": "posts/hw4/hw4.html",
    "title": "hw4",
    "section": "",
    "text": "#숙제1번 import scipy.stat import norm 사용금지 # 1. 정규분포 pdf 값을 계산하는 자신만의 # 파이썬 함수를 정의하고, # 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef my_pdf (x, mu, sigma):\n    part_1 = 1 / (sigma * math.sqrt(2 * math.pi))\n    part_2 = math.exp(-0.5 * ((x - mu) ** 2) / (sigma ** 2))\n    return part_1 * part_2\n\nmu = 3\nsigma = 2\n\nx_values=np.linspace(-10, 10, 100)\nplt.plot(x_values, pdf_values, color=\"black\")\npdf_values = [my_pdf(x, mu, sigma) for x in x_values]\n\nplt.show()"
  },
  {
    "objectID": "posts/hw4/hw4.html#숙제-qmd",
    "href": "posts/hw4/hw4.html#숙제-qmd",
    "title": "hw4",
    "section": "",
    "text": "#숙제1번 import scipy.stat import norm 사용금지 # 1. 정규분포 pdf 값을 계산하는 자신만의 # 파이썬 함수를 정의하고, # 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef my_pdf (x, mu, sigma):\n    part_1 = 1 / (sigma * math.sqrt(2 * math.pi))\n    part_2 = math.exp(-0.5 * ((x - mu) ** 2) / (sigma ** 2))\n    return part_1 * part_2\n\nmu = 3\nsigma = 2\n\nx_values=np.linspace(-10, 10, 100)\nplt.plot(x_values, pdf_values, color=\"black\")\npdf_values = [my_pdf(x, mu, sigma) for x in x_values]\n\nplt.show()"
  },
  {
    "objectID": "hw4.html",
    "href": "hw4.html",
    "title": "hw4",
    "section": "",
    "text": "#숙제1번 import scipy.stat import norm 사용금지 # 1. 정규분포 pdf 값을 계산하는 자신만의 # 파이썬 함수를 정의하고, # 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef my_pdf (x, mu, sigma):\n    part_1 = 1 / (sigma * math.sqrt(2 * math.pi))\n    part_2 = math.exp(-0.5 * ((x - mu) ** 2) / (sigma ** 2))\n    return part_1 * part_2\n\nmu = 3\nsigma = 2\nx_values=np.linspace(-10, 10, 100)\npdf_values = [my_pdf(x, mu, sigma) for x in x_values]\nplt.plot(x_values, pdf_values, color=\"black\")\nplt.show()"
  },
  {
    "objectID": "hw4.html#숙제-qmd",
    "href": "hw4.html#숙제-qmd",
    "title": "hw4",
    "section": "",
    "text": "#숙제1번 import scipy.stat import norm 사용금지 # 1. 정규분포 pdf 값을 계산하는 자신만의 # 파이썬 함수를 정의하고, # 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef my_pdf (x, mu, sigma):\n    part_1 = 1 / (sigma * math.sqrt(2 * math.pi))\n    part_2 = math.exp(-0.5 * ((x - mu) ** 2) / (sigma ** 2))\n    return part_1 * part_2\n\nmu = 3\nsigma = 2\nx_values=np.linspace(-10, 10, 100)\npdf_values = [my_pdf(x, mu, sigma) for x in x_values]\nplt.plot(x_values, pdf_values, color=\"black\")\nplt.show()"
  }
]